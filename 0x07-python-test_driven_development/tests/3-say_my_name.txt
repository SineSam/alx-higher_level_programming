# 3-say_my_name.txt
===================

Using ``say_my_name(first_name, last_name="")``
-----------------------------------------------

This module describes how to use the ``say_my_name(first_name, last_name="")`` method

Usage
=====

``say_my_name(...)`` takes arguments first_name and last_name and prints "My name is <first name> <last name>"

::

>>> say_my_name = __import__('3-say_my_name').say_my_name
>>> say_my_name("Sine", "Ngcongo")
My name is Sine Ngcongo

::

>>> say_my_name("Martin Luther", "King Jnr")
My name is Martin Luther King Jnr

The parameter ``last_name`` is optional, if none provided, print empty string

::

>>> say_my_name("Sine", last_name="")
My name is Sine 

Invalid names
=============

The parameters ``first_name`` and ``last_name`` must be strings, else raise TypeError

::

>>> say_my_name(["pear", "apple"], "Charles")
Traceback (most recent call last):
TypeError: first_name must be a string

::

>>> say_my_name(19, "Charles")
Traceback (most recent call last):
TypeError: first_name must be a string

::

>>> say_my_name("Charles", {"Williams": 2})
Traceback (most recent call last):
TypeError: last_name must be a string

At least one name must be provided
::

>>> say_my_name()
Traceback (most recent call last):
TypeError: say_my_name() missing 1 required positional argument: 'first_name'
